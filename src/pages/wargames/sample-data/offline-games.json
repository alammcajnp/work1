{
  "name": "Offline",
  "id": "offline",
  "games": [
    {
      "id": 1,
      "slug": "Semtex",
      "sshInfo": {
        "host": "bandit.labs.overthewire.org",
        "port": "1111"
      },
      "description": "<div id=\"content\"><h1 id=\"semtex\">Semtex</h1><div style=\"border: solid 1px black; background: #ccffcc; padding: 10px;\"><h3>2022-08-16 - semtex offline</h3>Semtex is offline.</div><h2 id=\"wargame\">Wargame?</h2><p>This network is a legal environment where you can learncoding/hacking techniques without destroying anything. You have tosolve Semtex 0 to get a username/password for login. Once logged in,you have to make your way from one level to the next, each onecontaining a small security hole/feature that has been installed foryou. Your mission is to find out how to exploit the weakness and tocause interesting behavior :)</p><h2 id=\"rules\">Rules?</h2><p>Well you can do anything you want on this box, code, hack, learn,… its all there for gaining knowledge. Please refrain from DOSattacks of any kind, it ruins the fun of you and of others. As longas you behave, everything is possible.</p><h2 id=\"contribute\">Contribute?</h2><p>This wargame is from the community for the community. If you want tocontribute, send a level plus exploit to aton at packetdropped dotorg.</p><p><strong>Network programming, reverse engineering, buffer overflows andcombinatorial analysis.</strong></p><p><strong>Contact : <a href=\"mailto:aton@packetdropped.org\">aton at packetdropped dot org</a></strong></p></div>",
      "levels": [
        {
          "id": 1,
          "slug": "level0",
          "text": "Level 0",
          "description": "<div id=\"content\"><div id=\"title\"><h1>Semtex Level 0</h1></div><script>renderLevelTitle(\"semtex\", 0);</script><h2 id=\"get-a-shell\">Get a shell</h2><p>semtex.labs.overthewire.org</p><table>  <tbody>    <tr>      <td>x86/elf:</td>      <td>Connect to port 24000</td>    </tr>    <tr>      <td>amd64/elf:</td>      <td>Connect to port 24001</td>    </tr>    <tr>      <td>ppc/mach-O:</td>      <td>Connect to port 24002</td>    </tr>  </tbody></table><p>Receive data until the port is closed.</p><p>Every second byte you receive is trash, ignore it.The other bytes are an executable that shows you the password.</p><p>Then login to <a href=\"ssh://semtex1@semtex.labs.overthewire.org:2229\">semtex1@semtex.labs.overthewire.org</a> on port 2229</p><p><strong>Thanks to mrx for the amd64 and ppc binaries!</strong></p><h2 id=\"reading-material\">Reading Material</h2><ul>  <li><a href=\"https://beej.us/guide/bgnet/\">Beej’s guide to network programming</a></li></ul></div>"
        },
        {
          "id": 2,
          "slug": "level1",
          "text": "Level 1",
          "description": "<div id=\"content\"><div id=\"title\"><h1>Semtex Level 1 → Level 2</h1></div><script>renderLevelTitle(\"semtex\", 2);</script><h2 id=\"dynamic-tricks\">Dynamic tricks</h2><p>This program checks your user ID.</p><p>Perhaps you can trick it, so that it thinks you have a different one.</p><p>Think dynamically.</p><h2 id=\"reading-material\">Reading Material</h2><ul>  <li><a href=\"https://www.google.com/search?q=linux+function+interception\">Link</a></li></ul></div>"
        },
        {
          "id": 3,
          "slug": "level2",
          "text": "Level 2",
          "description": "Bandit -> level 2 description"
        }
      ]
    },
    {
      "id": 2,
      "slug": "Drifter",
      "sshInfo": {
        "host": "bandit.labs.overthewire.org",
        "port": "2222"
      },
      "description": "<div id=\"content\"><h1 id=\"drifter\">Drifter</h1><div style=\"border: solid 1px black; background: #ccffcc; padding: 10px;\"><h3>2022-08-16 - drifter offline</h3>Drifter is offline.</div><p>Drifter is a wargame along the lines of Vortex.</p></div>",
      "levels": [
        {
          "id": 1,
          "slug": "level0",
          "text": "Level 0",
          "description": "<div id=\"content\"><div id=\"title\"><h1>Drifter Level 0</h1></div><script>renderLevelTitle(\"drifter\", 0);</script><p>Drifter can be accessed on drifter.labs.overthewire.org via SSH on port 2230. Level 0 listenson port 1111.</p><p>Level0 is an extremely trivial, encrypted, remote syscall proxy. Youraim is to read the contents of a file called “drifter0.password” to get thepassword for user drifter0.</p><p>Upon connection, it sets up an encrypted rc4 key (based on theconnecting IP address / port), read()’s in 9 integers, and then decryptsthem, and handles them off to syscall(). This allows the network clientto execute arbitrary syscalls in a safe way.</p><p>To give you an idea of what’s needed:</p><p><strong>You’ll need to</strong></p><ol>  <li>If you are behind a NAT/PAT, you might want to do vortex level0, andcomplete this level from vortex, as otherwise your known IP addressand port information changes.</li>  <li>Examine how the RC4 keys are generated, and how they are applied</li>  <li><a href=\"http://www.linuxinfor.com/english/man2/mmap2.html\">mmap2()</a> some memory. You will get the address where the memorywas allocated in the response from the server. mmap2() takes itsarguments from registers, not the stack.</li>  <li><a href=\"http://www.linuxinfor.com/english/man2/read.html\">read()</a> into that allocated buffer to get the file name. Thesource fd that you need will be 4. (0-2 = stdin/stdout/stderr, 3will be network socket, so 4 in next in line. You will want to readin enough data for the filename “instructions”</li>  <li>Write the filename (“instructions” sans quotes) to the allocatedmemory location to your client socket</li>  <li><a href=\"http://www.linuxinfor.com/english/man2/open.html\">open()</a> the “instructions” file. You will get the fd it wasallocated to in response</li>  <li><a href=\"http://www.linuxinfor.com/english/man2/read.html\">read()</a> from the allocated file descriptor to your allocatedmemory</li>  <li><a href=\"http://www.linuxinfor.com/english/man2/write.html\">write()</a> from the allocated buffer to the socket on the server(fd 4)</li></ol><p>Once all that is done, you will have the contents of the instructionsfile printed to your screen.</p><p>Of course - this does not prevent you from using other mechanisms toaccess the server, such as using “shelldemo” from metasploit 2.x toexamine the environment. In fact, using shelldemo is probably a goodexercise as well.</p><p>In order to get the values for the parameters you need, you can usecross-references of linux code on the net, for example, to look up thevalue for __NR_read (linux read syscall()), we can use <a href=\"https://www.google.com.au/search?q=linux+lxr+__NR_read&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a\">this</a> whichwill lead us to <a href=\"http://lxr.linux.no\">http://lxr.linux.no</a>. From there we can use thesearch facility to find the values we need, <a href=\"http://lxr.linux.no/linux/include/asm-i386/unistd.h#L11\">such as:</a></p><p>#define __NR_read 3</p><p>If this level is too complicated / involved, please leave a comment.While it’s complicated than adding several little endian integerstogether, I don’t want the initial level to be overkill.</p><p>The following sourcecode is located in /drifter/drifter0_src/ :</p><div>Included file: <a href=\"drifter0.c\">drifter0.c</a><script>renderCode(\"drifter0.c\")</script><div id=\"7a3oy\"><pre><code class=\" hljs cpp\"><span class=\"hljs-comment\">/* * Level 0 for drifter - Jan 16th, 2008 * * This is an extremely simple / stupid remote procedure call implementation * that allows system calls and parameters to be supplied directly, and  * return codes written to the caller.  * * For security reasons, it is chrooted and drops privileges, and in addition, * the connection is encrypted. (The previous sentence is a joke..) * * In the chroot directory, there is a file called 'instructions', open that,  * read the contents, and you'll know what to do next. * * In order to make things easier for yourself, there is plenty of tools  * out there already - I suggest that you read up and learn about them. * * - a scripting language (I humbly suggest Python, but whatever you're most *   comfortable with) * - http://oss.coresecurity.com/projects/inlineegg.html * - mosdef - http://www.immunitysec.com/resources-freesoftware.shtml * - http://archives.neohapsis.com/archives/vuln-dev/2003-q4/0006.html * - metasploit.com * - Plenty of other things :) * * To compile this code, gcc level0.c rc4.c -o /drifter/level0 */</span><span class=\"hljs-preprocessor\">#include &lt;stdlib.h&gt;</span><span class=\"hljs-preprocessor\">#include &lt;unistd.h&gt;</span><span class=\"hljs-preprocessor\">#include &lt;stdio.h&gt;</span><span class=\"hljs-preprocessor\">#include &lt;sys/socket.h&gt;</span><span class=\"hljs-preprocessor\">#include &lt;fcntl.h&gt;</span><span class=\"hljs-preprocessor\">#include &lt;string.h&gt;</span><span class=\"hljs-preprocessor\">#include &lt;sys/syscall.h&gt;</span><span class=\"hljs-preprocessor\">#include &lt;signal.h&gt;</span><span class=\"hljs-preprocessor\">#include &lt;netinet/in.h&gt;</span><span class=\"hljs-preprocessor\">#include &lt;netinet/tcp.h&gt;</span><span class=\"hljs-preprocessor\">#include \"rc4.h\"</span><span class=\"hljs-keyword\">void</span> dropprivs(){\t<span class=\"hljs-keyword\">int</span> groups[<span class=\"hljs-number\">1</span>];\t<span class=\"hljs-preprocessor\">#ifndef LEVELUID</span>\t<span class=\"hljs-preprocessor\">#error LEVELUID is not defined</span>\t<span class=\"hljs-preprocessor\">#endif</span>\t\t<span class=\"hljs-preprocessor\">#define LEVEL0 LEVELUID</span>\tgroups[<span class=\"hljs-number\">0</span>] = LEVEL0;\t<span class=\"hljs-keyword\">if</span>(setgroups(<span class=\"hljs-number\">1</span>, groups) != <span class=\"hljs-number\">0</span>) <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">15</span>);\t<span class=\"hljs-keyword\">if</span>(setresgid(LEVEL0, LEVEL0, LEVEL0) != <span class=\"hljs-number\">0</span>) <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">4</span>);\t<span class=\"hljs-keyword\">if</span>(setresuid(LEVEL0, LEVEL0, LEVEL0) != <span class=\"hljs-number\">0</span>) <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">5</span>);\t<span class=\"hljs-preprocessor\">#undef LEVEL0</span>}<span class=\"hljs-keyword\">void</span> setup_stuff(){\t<span class=\"hljs-comment\">/* Become a daemon, and drop privileges, chroot off, etc. */</span>\tsignal(SIGCHLD, SIG_IGN); <span class=\"hljs-comment\">// ignore children.. seems to work :p</span>\t<span class=\"hljs-comment\">//if(daemon(0, 0) != 0) exit(1);</span>\t<span class=\"hljs-keyword\">if</span>(chroot(<span class=\"hljs-string\">\"/home/drifter0/chroot\"</span>) != <span class=\"hljs-number\">0</span>) <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">2</span>);\t<span class=\"hljs-keyword\">if</span>(chdir(<span class=\"hljs-string\">\"/\"</span>) != <span class=\"hljs-number\">0</span>) <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">3</span>);\tdropprivs();}<span class=\"hljs-keyword\">int</span> create_socket(){\t<span class=\"hljs-comment\">/* Create / bind / listen on socket */</span>\t<span class=\"hljs-keyword\">int</span> ret;\t<span class=\"hljs-keyword\">struct</span> sockaddr_in <span class=\"hljs-built_in\">sin</span>;\tret = socket(AF_INET, SOCK_STREAM, <span class=\"hljs-number\">0</span>);\t<span class=\"hljs-keyword\">if</span>(ret == -<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">6</span>);\t<span class=\"hljs-built_in\">memset</span>(&amp;<span class=\"hljs-built_in\">sin</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> sockaddr_in));\t<span class=\"hljs-built_in\">sin</span>.sin_family = AF_INET,\t<span class=\"hljs-built_in\">sin</span>.sin_addr.s_addr = htonl(INADDR_ANY);\t<span class=\"hljs-built_in\">sin</span>.sin_port = htons(<span class=\"hljs-number\">1111</span>);\t<span class=\"hljs-keyword\">if</span>(bind(ret, (<span class=\"hljs-keyword\">void</span> *)&amp;<span class=\"hljs-built_in\">sin</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> sockaddr_in)) == -<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">7</span>);\t<span class=\"hljs-keyword\">if</span>(listen(ret, <span class=\"hljs-number\">5</span>) == -<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">8</span>);\t<span class=\"hljs-keyword\">return</span> ret;}<span class=\"hljs-keyword\">void</span> handle_client(<span class=\"hljs-keyword\">int</span> skt, <span class=\"hljs-keyword\">struct</span> sockaddr_in *<span class=\"hljs-built_in\">sin</span>){\t<span class=\"hljs-comment\">// Handle the client connection, and perform the requested operations.</span>\t\trc4_key key_in, key_out;\t<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> keymat[<span class=\"hljs-number\">6</span>];\t<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> args[<span class=\"hljs-number\">9</span>];\t<span class=\"hljs-keyword\">int</span> i, ret;\t<span class=\"hljs-comment\">//dropprivs();</span>\t<span class=\"hljs-built_in\">memcpy</span>(keymat, &amp;(<span class=\"hljs-built_in\">sin</span>-&gt;sin_addr.s_addr), <span class=\"hljs-number\">4</span>);\t<span class=\"hljs-built_in\">memcpy</span>(keymat+<span class=\"hljs-number\">4</span>, &amp;(<span class=\"hljs-built_in\">sin</span>-&gt;sin_port), <span class=\"hljs-number\">2</span>);\tprepare_key(keymat, <span class=\"hljs-number\">6</span>, &amp;key_in);\tprepare_key(keymat, <span class=\"hljs-number\">6</span>, &amp;key_out);\t<span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">42</span>;i++) {\t\t<span class=\"hljs-comment\">// cycle through first 256 bytes</span>\t\trc4(keymat, <span class=\"hljs-number\">6</span>, &amp;key_in);\t\trc4(keymat, <span class=\"hljs-number\">6</span>, &amp;key_out);\t}\t<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>) {\t\talarm(<span class=\"hljs-number\">60</span>);\t\tsleep(<span class=\"hljs-number\">1</span>);\t\t<span class=\"hljs-keyword\">if</span>(read(skt, &amp;args, <span class=\"hljs-keyword\">sizeof</span>(args)) != <span class=\"hljs-keyword\">sizeof</span>(args)) <span class=\"hljs-built_in\">exit</span>(EXIT_SUCCESS);\t\trc4(&amp;args, <span class=\"hljs-keyword\">sizeof</span>(args), &amp;key_in);\t\t\t\tret = syscall(args[<span class=\"hljs-number\">0</span>], args[<span class=\"hljs-number\">1</span>], args[<span class=\"hljs-number\">2</span>], args[<span class=\"hljs-number\">3</span>], args[<span class=\"hljs-number\">4</span>], args[<span class=\"hljs-number\">5</span>], args[<span class=\"hljs-number\">6</span>], args[<span class=\"hljs-number\">7</span>], args[<span class=\"hljs-number\">8</span>]);\t\trc4(&amp;ret, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">int</span>), &amp;key_out);\t\t<span class=\"hljs-keyword\">if</span>(write(skt, &amp;ret, <span class=\"hljs-keyword\">sizeof</span>(ret)) != <span class=\"hljs-keyword\">sizeof</span>(ret)) <span class=\"hljs-built_in\">exit</span>(EXIT_SUCCESS);\t}}<span class=\"hljs-keyword\">void</span> mainloop(){\t<span class=\"hljs-keyword\">int</span> skt;\t<span class=\"hljs-keyword\">int</span> cli;\t<span class=\"hljs-keyword\">int</span> so;\t<span class=\"hljs-keyword\">int</span> ret;\t<span class=\"hljs-keyword\">struct</span> sockaddr_in <span class=\"hljs-built_in\">sin</span>;\tskt = create_socket();\t<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-number\">1</span>) {\t\tso = <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> sockaddr_in);\t\tcli = accept(skt, (<span class=\"hljs-keyword\">void</span> *)&amp;<span class=\"hljs-built_in\">sin</span>, &amp;so);\t\t<span class=\"hljs-keyword\">if</span>(cli == -<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">9</span>);\t\tret = fork();\t\t<span class=\"hljs-keyword\">if</span>(ret == -<span class=\"hljs-number\">1</span>) <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">10</span>);\t\t\t\t<span class=\"hljs-comment\">// parent</span>\t\t\t\t<span class=\"hljs-keyword\">if</span>(ret) {\t\t\tclose(cli);\t\t\t<span class=\"hljs-keyword\">continue</span>;\t\t}\t\t<span class=\"hljs-comment\">// child</span>\t\tclose(skt);\t\thandle_client(cli, &amp;<span class=\"hljs-built_in\">sin</span>);\t\t<span class=\"hljs-built_in\">exit</span>(EXIT_SUCCESS);\t}}<span class=\"hljs-keyword\">int</span> main(<span class=\"hljs-keyword\">int</span> argc, <span class=\"hljs-keyword\">char</span> **argv){\tsetup_stuff();\tmainloop();\t}</code></pre></div></div><div>Included file: <a href=\"rc4.c\">rc4.c</a><script>renderCode(\"rc4.c\")</script><div id=\"9atpmr\"><pre><code class=\" hljs objectivec\"><span class=\"hljs-preprocessor\">#include \"rc4.h\"</span><span class=\"hljs-keyword\">void</span> prepare_key(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> *key_data_ptr, <span class=\"hljs-keyword\">int</span> key_data_len, rc4_key *key){  <span class=\"hljs-keyword\">int</span> i;  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> t;  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> swapByte;  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> index1;  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> index2;  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span>* state;  <span class=\"hljs-keyword\">short</span> counter;  state = &amp;key-&gt;state[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-keyword\">for</span>(counter = <span class=\"hljs-number\">0</span>; counter &lt; <span class=\"hljs-number\">256</span>; counter++)  state[counter] = counter;  key-&gt;x = <span class=\"hljs-number\">0</span>;  key-&gt;y = <span class=\"hljs-number\">0</span>;  index1 = <span class=\"hljs-number\">0</span>;  index2 = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-keyword\">for</span>(counter = <span class=\"hljs-number\">0</span>; counter &lt; <span class=\"hljs-number\">256</span>; counter++)  {    index2 = (key_data_ptr[index1] + state[counter] + index2) % <span class=\"hljs-number\">256</span>;    swap_byte(&amp;state[counter], &amp;state[index2]);    index1 = (index1 + <span class=\"hljs-number\">1</span>) % key_data_len;  }}<span class=\"hljs-keyword\">void</span> rc4(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> *buffer_ptr, <span class=\"hljs-keyword\">int</span> buffer_len, rc4_key *key){  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> t;  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> x;  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> y;  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span>* state;  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> xorIndex;  <span class=\"hljs-keyword\">short</span> counter;  x = key-&gt;x;  y = key-&gt;y;  state = &amp;key-&gt;state[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-keyword\">for</span>(counter = <span class=\"hljs-number\">0</span>; counter &lt; buffer_len; counter++)  {    x = (x + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">256</span>;    y = (state[x] + y) % <span class=\"hljs-number\">256</span>;    swap_byte(&amp;state[x], &amp;state[y]);    xorIndex = (state[x] + state[y]) % <span class=\"hljs-number\">256</span>;    buffer_ptr[counter] ^= state[xorIndex];  }  key-&gt;x = x;  key-&gt;y = y;}</code></pre></div></div><div>Included file: <a href=\"rc4.h\">rc4.h</a><script>renderCode(\"rc4.h\")</script><div id=\"gh48ff\"><pre><code class=\" hljs objectivec\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span> rc4_key{         <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> state[<span class=\"hljs-number\">256</span>];          <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> x;           <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">char</span> y;} rc4_key;<span class=\"hljs-preprocessor\">#define swap_byte(x,y) t = *(x); *(x) = *(y); *(y) = t</span></code></pre></div></div></div>"
        },
        {
          "id": 2,
          "slug": "level1",
          "text": "Level 1",
          "description": "Natas -> level 1 description"
        },
        {
          "id": 3,
          "slug": "level2",
          "text": "Level 2",
          "description": "Natas -> level 2 description"
        }
      ]
    }
  ]
}